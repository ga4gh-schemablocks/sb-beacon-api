$schema: http://json-schema.org/draft-07/schema#
$id: https://schemablocks.org/schemas/beacon-v2/GenomicVariantFields/2.0.0-draft.3
meta:
  contributors:
    - label: ELIXIR Beacon project team
      id: https://beacon-project.io/categories/people.html
    - label: Jordi Rambla
      id: github:@jrambla
    - label: Sabele de la Torre
      id: github:@sdelatorrep
    - label: Mamana Mbiyavanga
      id: github:@mamanambiya
    - label: Michael Baudis
      id: orcid:0000-0002-9903-4248
  provenance:
    - label: Beacon v2 provisional / developer version
      id: https://github.com/ga4gh-beacon/specification-v2
  used_by:
    - label: Progenetix database schema (Beacon+ backend)
      id: https://github.com/progenetix/schemas/
  sb_status: proposed
version: 2.0.0-draft.3
title: GenomicVariantFields
description: |
  All the required fields to query any kind of variant (e.g. SNP, DUP,
  etc.).
type: object
properties:
  id:
    description: |
      Id of the variant to display.
    type: string
  assemblyId:
    $ref: Assembly.yaml#/
  referenceName:
    $ref: Chromosome.yaml#/
  start:
    description: |
      Precise or fuzzy start coordinate position(s), allele locus
      (0-based, inclusive).
      * `start` only:
        - for single positions, e.g. the start of a specified sequence
        alteration where the size is given through the specified
        `alternateBases`
        - typical use are queries for SNV and small InDels
        - the use of `start` without an `end` parameter requires the use
        of `alternateBases`

      * `start` and `end`:
        - for searching any variant falling fully or partially within the
        range between `start` and `end` (a.k.a. "range query")
        - additional use of `variantType` OR `alternateBases` can limit the
        scope of the query
        - by convention, partial overlaps of variants with the indicated
        genomic range are accepted; for specific overlap requirements the
        4-parammeter "Bracket Queries" should be employed
      * use of 2 values in both `start` and `end` for constructing a
      "Bracket Query":
        - can be used to match any contiguous genomic interval, e.g. for
        querying imprecise positions
          * identifying all structural variants starting between `start[0]`
          and `start[1]`, and ending between `end[0]` <-> `end[1]`
          * single or double sided precise matches can be achieved by
          setting `start[1]=start[0]+1` and `end[1]=end[0]+1`
    type: array
    items:
      type: integer
      format: int64
      minimum: 0
    minItems: 1
    maxItems: 2
  end:
    description: |
      Precise or bracketing the end of the variants of interest:
      * (0-based, exclusive) - see `start`
      * for bracket queries, provide 2 values (e.g. [111,222]).
    type: array
    items:
      type: integer
      format: int64
      minimum: 1
    minItems: 0
    maxItems: 2
  referenceBases:
    $ref: ReferenceBases.yaml#/
  alternateBases:
    $ref: AlternateBases.yaml#/
  variantType:
    description: |
      The `variantType` is used to query variants which are not defined
      through a sequenc of one or more bases using the `alternateBases`
      parameter. Examples here are e.g. structural variants:
      * DUP
        - increased allelic count of material from the genomic region
        between `start` and `end` positions
        - no assumption about the placement of the additional sequences is
        being made (i.e. no _in situ_ requirement as tandem duplications)
      * DEL: deletion of sequence following `start`
      * BND: breakend, i.e. termination of the allele at position
            `start` or in the `startMin` => `startMax` interval, or fusion
            of the sequence to distant partner
      Either `alternateBases` or `variantType` is required, with the
      exception of range queries (single `start` and `end` parameters).
    type: string
  mateName:
    $ref: Chromosome.yaml#/
